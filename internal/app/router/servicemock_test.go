// Code generated by mockery v2.52.2. DO NOT EDIT.

package router

import (
	context "context"

	models "github.com/carinfinin/shortener-url/internal/app/models"
	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// CreateURL provides a mock function with given fields: ctx, url
func (_m *MockService) CreateURL(ctx context.Context, url string) (string, error) {
	ret := _m.Called(ctx, url)

	if len(ret) == 0 {
		panic("no return value specified for CreateURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, url)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, url)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserURLs provides a mock function with given fields: ctx, data
func (_m *MockService) DeleteUserURLs(ctx context.Context, data []string) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserURLs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetURL provides a mock function with given fields: ctx, id
func (_m *MockService) GetURL(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserURLs provides a mock function with given fields: ctx
func (_m *MockService) GetUserURLs(ctx context.Context) ([]models.UserURL, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUserURLs")
	}

	var r0 []models.UserURL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.UserURL, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.UserURL); ok {
		r0 = rf(ctx)
	} else if ret.Get(0) != nil {
		r0 = ret.Get(0).([]models.UserURL)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JSONHandleBatch provides a mock function with given fields: ctx, data
func (_m *MockService) JSONHandleBatch(ctx context.Context, data []models.RequestBatch) ([]models.ResponseBatch, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for JSONHandleBatch")
	}

	var r0 []models.ResponseBatch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.RequestBatch) ([]models.ResponseBatch, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []models.RequestBatch) []models.ResponseBatch); ok {
		r0 = rf(ctx, data)
	} else if ret.Get(0) != nil {
		r0 = ret.Get(0).([]models.ResponseBatch)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []models.RequestBatch) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PingDB provides a mock function with given fields: ctx
func (_m *MockService) PingDB(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PingDB")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stat provides a mock function with given fields: ctx
func (_m *MockService) Stat(ctx context.Context) (*models.Stat, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stat")
	}

	var r0 *models.Stat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*models.Stat, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *models.Stat); ok {
		r0 = rf(ctx)
	} else if ret.Get(0) != nil {
		r0 = ret.Get(0).(*models.Stat)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
